Sanscript {
  Program = Statement+
  Statement = PrintStatement
            | VariableDecl
            | AssignStatement
            | IfStatement
            | Return
            | FuncDecl
            | Call
            | Loop

  PrintStatement   = print Exp ";"
  VariableDecl     = var Type id "=" Exp ";"
  AssignStatement  = Exp7_id "=" Exp ";"
  Return           = return Exp ";"
  IfStatement      = if "(" Exp ")" Block else Block          -- long
                   | if "(" Exp ")" Block else IfStatement    -- elsif
                   | if "(" Exp ")" Block                     -- short

  Block            = "{" Statement* "}"
  FuncDecl         = function id "(" TypedParams ")" ":" Type Block
  Call             = id "(" Args ")" 
  
  Loop = while "(" Exp ")" Block                              -- while
       | for id "=" Exp ";" Exp ";" id "=" Exp ";" Block      -- for
  
  Exp       = Exp1 "?" Exp1 ":" Exp                           -- ternary
            | Exp1
  Exp1      = Exp1 "||" Exp2                                  -- or
            | Exp2
  Exp2      = Exp2 "&&" Exp3                                  -- and
            | Exp3
  Exp3      = Exp4 ("<="|"<"|"=="|"!="|">="|">") Exp4         -- compare
            | Exp4  
  Exp4      = Exp4 ("+" | "-") Exp5                           -- add
            | Exp5
  Exp5      = Exp5 ("*" | "/" | "%") Exp6                     -- multiply
            | Exp6
  Exp6      = Exp7 "**" Exp6                                  -- power
            | Exp7
  Exp7      = num                                             -- num
            | true                                            -- true
            | false                                           -- false
            | Call                                            -- call    
            | id                                              -- id
            | "(" Exp ")"                                     -- parentheses
            | stringlit

  Params    = ListOf<id, ",">
  TypedParam = Type id
  TypedParams = ListOf<TypedParam, ",">
  Args      = ListOf<Exp, ",">
  id        = ~keyword letter withunderscore*
  withunderscore = letter | digit | "_"
  
  Type      = "ginti"   -- number
            | "babla"     -- boolean
            | "dhaga"     -- string

  function  = "prakriya" ~alnum
  print     = "likhana" ~alnum
  return    = "laana" ~alnum
  var       = "sankhya" ~alnum
  if        = "agar" ~alnum
  else      = "varana" ~alnum
  true      = "saty" ~alnum
  false     = "asaty" ~alnum
  while     = "jabtaki" ~alnum
  for       = "doharaana" ~alnum
  
  keyword   = function | var | if | else | while | for
            | return | true | false 

  num = digit+
  stringlit = "\"" (~"\\" ~"\"" ~"\n" any )* "\""
}
